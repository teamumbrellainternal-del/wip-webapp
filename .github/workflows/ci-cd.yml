name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - staging
      - 'claude/**'
  pull_request:
    branches:
      - main
      - staging

env:
  NODE_VERSION: '20'

jobs:
  # Lint and Type Check
  lint-and-type-check:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript type check
        run: npm run type-check

      - name: Check code formatting
        run: npm run format:check

  # Unit and Integration Tests
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint-and-type-check
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test -- tests/unit

      - name: Run integration tests
        run: npm run test -- tests/integration

      - name: Run E2E tests
        run: npm run test -- tests/e2e

      - name: Generate coverage report
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/coverage-final.json
          fail_ci_if_error: false

  # Build Worker
  build:
    name: Build Worker
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build frontend
        run: npm run build

      - name: Build worker
        run: npm run build:worker

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            .wrangler/
          retention-days: 7

  # Database Migration Verification
  verify-migrations:
    name: Verify Database Migrations
    runs-on: ubuntu-latest
    needs: lint-and-type-check
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install wrangler
        run: npm install -g wrangler

      - name: Verify migration files
        run: node scripts/verify-migrations.js

      - name: Check migration order
        run: |
          echo "Checking migration file order..."
          ls -1 db/migrations/*.sql | sort -V

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, verify-migrations]
    if: github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/main'
    environment:
      name: staging
      url: https://api-staging.umbrella.example.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Validate environment variables
        run: node scripts/validate-env.js staging
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

      - name: Run database migrations (staging)
        run: npm run migrate:staging
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Deploy to Cloudflare Workers (staging)
        run: wrangler deploy --env staging
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Run smoke tests
        run: npm run test:smoke
        env:
          API_URL: https://api-staging.umbrella.example.com
          SMOKE_TEST_TOKEN: ${{ secrets.STAGING_SMOKE_TEST_TOKEN }}

      - name: Health check
        run: |
          echo "Running health check..."
          curl -f https://api-staging.umbrella.example.com/v1/health || exit 1

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, verify-migrations, deploy-staging]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: https://api.umbrella.example.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Validate environment variables
        run: node scripts/validate-env.js production
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

      - name: Create backup tag
        run: |
          git tag "backup-$(date +%Y%m%d-%H%M%S)"
          git push origin --tags

      - name: Run database migrations (production)
        run: npm run migrate:prod
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Deploy to Cloudflare Workers (production)
        run: wrangler deploy --env production
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Run smoke tests
        run: npm run test:smoke
        env:
          API_URL: https://api.umbrella.example.com
          SMOKE_TEST_TOKEN: ${{ secrets.PRODUCTION_SMOKE_TEST_TOKEN }}

      - name: Health check
        run: |
          echo "Running health check..."
          curl -f https://api.umbrella.example.com/v1/health || exit 1

      - name: Performance benchmark
        run: node scripts/performance-check.js
        env:
          API_URL: https://api.umbrella.example.com

      - name: Notify deployment success
        if: success()
        run: |
          echo "✅ Production deployment successful!"
          echo "Deployment time: $(date)"

      - name: Rollback on failure
        if: failure()
        run: |
          echo "❌ Deployment failed! Initiating rollback..."
          node scripts/rollback.js
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

  # Performance Testing (Post-deployment)
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run performance tests
        run: node scripts/performance-check.js
        env:
          API_URL: https://api-staging.umbrella.example.com

      - name: Verify P95 latency < 500ms
        run: |
          echo "Checking P95 latency for profile views..."
          # This would be implemented to check actual latency
          node scripts/check-latency.js

# Notification job
  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    steps:
      - name: Send notification
        run: |
          echo "Pipeline completed with status: ${{ needs.deploy-production.result }}"
          # Add Slack/Discord webhook notification here if needed
