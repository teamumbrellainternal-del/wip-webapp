import type { ConfigData, EnvVariable } from '@/types'

export function generateEnvContent(data: ConfigData, includeComments = true): string {
  const lines: string[] = []
  
  // Add header comment
  if (includeComments) {
    lines.push('# OpenWebUI Configuration')
    lines.push('# Generated by openwebui-config.com')
    lines.push('')
  }
  
  // Sort keys for consistent output
  const sortedKeys = Object.keys(data).sort()
  
  for (const key of sortedKeys) {
    const value = data[key]
    
    if (value !== undefined && value !== '') {
      // Escape value if needed
      const escapedValue = needsQuotes(value) ? `"${escapeValue(value)}"` : value
      lines.push(`${key}=${escapedValue}`)
    }
  }
  
  return lines.join('\n')
}

export function generateEnvFromVariables(variables: EnvVariable[]): string {
  const lines: string[] = []
  
  for (const variable of variables) {
    // Add comment if present
    if (variable.comment) {
      const commentLines = variable.comment.split('\n')
      for (const commentLine of commentLines) {
        lines.push(`# ${commentLine}`)
      }
    }
    
    // Add the variable
    const escapedValue = needsQuotes(variable.value) ? `"${escapeValue(variable.value)}"` : variable.value
    lines.push(`${variable.key}=${escapedValue}`)
    
    // Add spacing after each variable for readability
    lines.push('')
  }
  
  return lines.join('\n').trim()
}

function needsQuotes(value: string): boolean {
  // Need quotes if value contains spaces, special characters, or is empty
  return /[\s#"'\\$`]/.test(value) || value === ''
}

function escapeValue(value: string): string {
  // Escape quotes and backslashes
  return value.replace(/\\/g, '\\\\').replace(/"/g, '\\"')
}

export function formatEnvContent(content: string): string {
  const lines = content.split('\n')
  const formatted: string[] = []
  
  for (const line of lines) {
    const trimmed = line.trim()
    
    if (!trimmed) {
      // Preserve empty lines but normalize them
      formatted.push('')
      continue
    }
    
    if (trimmed.startsWith('#')) {
      // Format comment lines
      formatted.push(trimmed)
      continue
    }
    
    if (trimmed.includes('=')) {
      const equalIndex = trimmed.indexOf('=')
      const key = trimmed.substring(0, equalIndex).trim()
      const value = trimmed.substring(equalIndex + 1).trim()
      
      if (key) {
        formatted.push(`${key}=${value}`)
      }
    }
  }
  
  return formatted.join('\n')
}